{
  "metadata": {
    "title": "Adding Pages",
    "theme": ""
  },
  "content": {
    "header": "How To Add Pages To FrisWiki :",
    "body": "<p>To add pages to <strong>friswiki</strong>, you first need to make their JSON files in either a code editor or in the page generator included with the files. You can then start writing out your pages, this guide will <em>Only</em> cover <strong>JSON Release V1</strong> pages. Some steps can be skipped while using the page gens so I will specifically tell you which steps are for which</p>\n<h2>Code Editors :</h2>\n<p>to start creating the page you need to make a <code>yourpage.json</code> file and put it inside <code>yourwikiname/data/pages</code> , and also finish the json's metadata</p>\n<h3>Metadata Setup : (Code editors)</h3>\n<ol>\n<li>\n<p>Firstly, this is optional but it's recommended to add a &quot;JSON release&quot; value before your metadata object</p>\n</li>\n<li>\n<p>you must make a &quot;metadata&quot; object, and add &quot;title&quot; and &quot;theme&quot; <em>(optional</em>) props.</p>\n</li>\n</ol>\n<p>If you added them all, your page should look like this :</p>\n<pre><code>{\n  &quot;JSON release&quot;: &quot;V1&quot;,\n  &quot;metadata&quot;: {\n    &quot;title&quot;: &quot;your title&quot;,\n    &quot;theme&quot;: &quot;your theme&quot;\n  }\n}\n</code></pre>\n<p>Now let me actually explain what these two values do.</p>\n<h4>Title :</h4>\n<p>The title value is the title of the page that gets processed in scripts and it's the one used in breadcrumbs at the top of the page</p>\n<h4>Theme :</h4>\n<p>Currently unused in code, This used to force Themes on users, and since it's useless there's no reason to include it unless it gets readded later down the line.</p>\n<p>Anyways now that you guys understand what these are let's continue with the guide.</p>\n<h3>Page Content : (Code editors)</h3>\n<p>Now here where it gets complicated for code editor users.</p>\n<p>To write content to the page, you must add a <strong>&quot;content&quot;</strong> object after the metadata object ends like so :</p>\n<pre><code>{\n  &quot;JSON release&quot;: &quot;V1&quot;,\n  &quot;metadata&quot;: {\n    &quot;title&quot;: &quot;your title&quot;,\n    &quot;theme&quot;: &quot;your theme&quot;\n  },\n  &quot;content&quot;: {\n    \n  }\n}\n</code></pre>\n<p>And under that content object is where the actual page content, like text and headers, tables and images are displayed.</p>\n<p>under the content object you must add two props, first <strong>&quot;header&quot;</strong> then add <strong>&quot;body&quot;</strong>.</p>\n<p><strong>Note :</strong> This Page was made after I overall refactored the rendering code and actually made the &quot;header&quot; object optional for V1 anyways continue the guide.</p>\n<p>After you add these two, like this :</p>\n<pre><code>{\n  &quot;JSON release&quot;: &quot;V1&quot;,\n  &quot;metadata&quot;: {\n    &quot;title&quot;: &quot;your title&quot;,\n    &quot;theme&quot;: &quot;your theme&quot;\n  },\n  &quot;content&quot;: {\n    &quot;header&quot;: &quot;&quot;,\n    &quot;body&quot;: &quot;&quot;\n  }\n}\n</code></pre>\n<p>You can add your whole Page's Big Header To the header prop\n<code>&quot;header&quot;: &quot;Your header here,&quot;</code></p>\n<p>And you can start writing The Page in html.\nYup maximum customization everything can be used to customize it to your liking which is a high advantage over page generators, after your done with the html, you can take the body from your page html file and add it to the <strong>&quot;body&quot;</strong> object like this:</p>\n<p><code>&quot;body&quot;: &quot;&lt;p&gt;this is a cool paragraph inside your wiki page&lt;/p&gt;&quot;, </code></p>\n<p>There's still more to setup but let's go over to how you setup the page using page gens first.</p>\n<h2>Page Generators :</h2>\n<p>Page generator is an html application that comes with downloaded FrisWiki source code that makes it easier to write page jsons.</p>\n<p>To Start Open up the Page generator html file inside <code>/data/page-generator/</code> and then you'll meet an interface similar in style to frisbee, with three Fields and textarea.</p>\n<p>The first field Three Fields Labeled &quot;Title&quot;, &quot;Theme&quot;, &quot;Header&quot; are the equivalents to their JSON props counter parts.</p>\n<p>The textarea is however the main part. It's where you can write your page in markdown (supported by marked.js), So it Should be easier!</p>\n<p>After you are done writing you can press the <strong>Generate Json</strong> button to make a download link appear with your generated JSON</p>\n<h2>Adding The Page To The Renderer and Searchbar :</h2>\n<p>These step is needed for all if you want to render your page.</p>\n<p>Open up your wiki folder and go to data, pages and then slap your JSON in there (rename it if you want), then copy it's path.\nThen within the data folder go inside your pages.json where you can insert your JSON files path and page title (can be different from the other title prop if you want) and add keywords that can be used in search.</p>\n<p>Example (add this to pages.json and edit it if ur lazy) :</p>\n<pre><code> &quot;title&quot;: &quot;Your page title&quot;, &quot;file&quot;: &quot;/data/pages/tutorial.json&quot;, &quot;keywords&quot;: [&quot;here&quot;, &quot;you&quot;, &quot;can&quot;, &quot;put&quot;, &quot;your&quot;, &quot;keywords&quot;] }\n</code></pre>\n<p><strong>Small Note Though</strong> all keywords that you add, need to be in lowercase, the code requires that or else it just won't work.</p>\n<p>after this, you should be done!\nyour page should be present in your searchbar when you search for it's title or one of the keywords and should be correctly rendered when visiting it's page.</p>\n"
  }
}